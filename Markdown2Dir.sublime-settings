{
    // ===== General Guidelines =====
    // IMPORTANT: Configure these settings before starting your project.
    // The plugin generates markdown from directories and vice versa using the rules below.
    // Save the markdown file in the same directory as the project files to be processed.

    // ===== Settings =====

    "file_naming_convention": "on_fence",
    // Options: "on_fence", "before_fence", "after_fence"
    // Defines how filenames are represented in markdown:
    // - "before_fence":
    //       path/to/file.cpp
    //       ```cpp
    //       // Code content
    //       ```
    // - "on_fence":
    //       ```path/to/file.cpp
    //       // Code content
    //       ```
    // - "after_fence":
    //       ```cpp
    //       // path/to/file.cpp
    //       // Code content
    //       ```

    "blocks_ignored": ["lessthan_3", "nameless", "readme", "properties", "without_ext"],
    // Specifies which code blocks to ignore during processing:
    // - "readme": Ignore blocks containing "readme" or "README"
    // - "properties": Ignore blocks containing "properties" or "PROPERTIES"
    // - "lessthan_3": Ignore blocks smaller than 3 lines
    // - "nameless": Ignore blocks without filenames
    // - "without_ext": Ignore files without extensions
    // Note: Empty blocks are always ignored regardless of settings

    "extensions_2_include": [],
    // Specify file extensions to include (takes precedence over "extensions_2_ignore")
    // Example: ["cpp", "py", "txt"]
    // Leave empty to use extension ignore list instead

    "extensions_2_ignore": [
        "o", "a", "so", "dll", "exe", "bin", "pyc", "pyo", "pyd",
        "db", "sqlite", "sqlite3", "log", "tmp", "temp"
    ],
    // Specify file extensions to exclude (used only if "extensions_2_include" is empty)
    // Example: ["log", "tmp"]
    // Leave empty to include all extensions

    "directories_2_include": [],
    // List directories to include during processing (takes precedence over "directories_2_ignore")
    // Example: ["src", "include"]
    // Leave empty to use directory ignore list instead

    "directories_2_ignore": [
        ".git", ".svn", "__pycache__", "node_modules", ".pio",
        "build", "dist", "target", "out", "bin", "obj"
    ],
    // List directories to exclude from processing (used only if "directories_2_include" is empty)
    // Example: ["build", "temp"]
    // Also excludes their subdirectories if "include_nested_directories" is true

    "include_nested_directories": true,
    // Options: true, false
    // If true, applies directory include/ignore rules to all subdirectories
    // If false, only applies rules to immediate directory names

    "files_2_include": [],
    // Specify exact filenames to include (takes precedence over all other file filters)
    // Example: ["main.cpp", "config.json"]
    // Files listed here will be processed regardless of other settings

    "files_2_ignore": [],
    // Specify exact filenames to exclude (used only if "files_2_include" is empty)
    // Example: ["debug.log", "README.md"]
    // Files listed here will be ignored unless specified in "files_2_include"

    "partial_names_2_include": [],
    // Specify keywords to include files and directories whose names contain these terms
    // Example: ["config", "settings"]
    // Case-insensitive matching

    "partial_names_2_ignore": [
        ".gitignore", ".DS_Store", "Thumbs.db", ".env"
    ],
    // Specify keywords to exclude files and directories whose names contain these terms
    // Example: ["debug", "temp"]
    // Case-insensitive matching

    "attempt_injection": false,
    // Options: true, false
    // When true, attempts to intelligently inject new code into existing files:
    // - For Python: Matches function/class definitions
    // - For other languages: Uses brace matching and content comparison
    // - Comments out replaced sections using appropriate syntax for the file type
    // When false, uses "handle_file_conflicts" setting instead

    "handle_file_conflicts": "prepend_and_comment",
    // Options: "prepend_and_comment", "append_n_to_filename", "move_to_backup_dir"
    // Determines how to handle existing files during processing:
    // - "prepend_and_comment": Adds new code at start, comments out existing content
    // - "append_n_to_filename": Creates new file with incremented number (file_1.cpp)
    // - "move_to_backup_dir": Moves existing file to backup/ directory before writing

    "include_system_folders": false,
    // Options: true, false
    // If true, processes folders/files that begin with '.' or '_'
    // If false, skips system folders like .git, __pycache__, etc.

    "output_directory_tree": true,
    // Options: true, false
    // When true, includes a visual directory tree at the start of generated markdown
    // Tree shows the structure of all processed files and directories

    "enable_context_menu": false,
    // Options: true, false
    // Adds "Directory 2 Markdown" and "Markdown 2 Directory" to context menu
    // Changes require restart of Sublime Text to take effect

    "enable_key_bindings": false,
    // Options: true, false
    // Default key bindings (when enabled):
    // - Directory 2 Markdown: ctrl+alt+m (command+alt+m on Mac)
    // - Markdown 2 Directory: alt+shift+m
    // Customize in Preferences -> Key Bindings

    "enable_debug_output": false
    // Options: true, false
    // When true, outputs detailed operation logs to the console
    // Useful for troubleshooting or understanding the process flow
}